{"version":3,"sources":["components/navbar.js","components/cards.js","components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","data-hover","data-active","score","highScore","Card","onClick","randomRender","id","alt","name","src","image","Wrapper","children","App","state","friends","_this","forEach","clicked","alert","setState","resetGame","updateScore","newHighScore","randomOrganize","array","i","copy","n","length","Math","floor","random","push","newState","winning","setTimeout","_this2","this","navbar","src_components_Wrapper","map","friend","cards","Object","assign","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.52529c0b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Navbar = props => (\r\n\r\n    <div className=\"navbar z-depth-5\">\r\n        <a href=\"/\" className=\"nav nav-link\" data-hover=\"Match&rarr;&amp;&larr;Mix\" data-active=\"Active!\"><span>Mix&larr;&amp;&rarr;Match</span></a>\r\n        <p className=\"nav nav-item info\">Click an image to begin</p>\r\n\r\n        <div className=\"nav nav-item mr-4 scores\">\r\n            Score: {props.score} Top Score: {props.highScore}\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nconst Card = props => (\r\n    <div className=\"card-item\" onClick={() => props.randomRender(props.id)}>\r\n        <div className=\"img-container\">\r\n            <img alt={props.name} src={props.image} className=\"card-img\" />\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default Card;","import React from 'react';\r\nimport \"./Wrapper.css\"\r\n\r\nconst Wrapper = props =>\r\n\r\n    <div className=\"main\">\r\n        <h1 className=\"head top-head\">Mix &amp; Match Game!</h1>\r\n        <br />\r\n        <h4 className=\"head mb-4\">Click on an image to earn points,<br /> but don't click on any one more than once!</h4>\r\n        <div className=\"wrapper\">{props.children}</div>\r\n        <div className=\"footer-copyright text-center py-3\">Â© 2018 Copyright: <a href=\"https://github.com/aschlegel09/mix-match\" className=\"text-white\">aschlegel09 Github</a>\r\n      </div>\r\n    </div>\r\n\r\nexport default Wrapper;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Navbar from \"./components/navbar\";\r\nimport Card from \"./components/cards\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport friends from \"./friends.json\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    score: 0,\r\n    highScore: 0,\r\n    friends: friends\r\n  };\r\n\r\n  randomRender = id => {\r\n    this.state.friends.forEach(image => {\r\n      if (image.id === id) {\r\n        if (image.clicked) {\r\n          alert(\"YOU LOSE!\");\r\n          this.setState({});\r\n          this.resetGame();\r\n          return false;\r\n        } else {\r\n          this.updateScore();\r\n          image.clicked = true;\r\n        }\r\n        if (this.state.score >= this.state.highScore) {\r\n          this.newHighScore();\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  randomOrganize = array => {\r\n    let copy = [],\r\n      n = array.length,\r\n      i;\r\n    while (n) {\r\n      i = Math.floor(Math.random() * array.length);\r\n      if (i in array) {\r\n        copy.push(array[i]);\r\n        delete array[i];\r\n        n--;\r\n      }\r\n    }\r\n    this.setState({ friends: copy });\r\n  };\r\n\r\n  updateScore = () => {\r\n    this.setState(\r\n      newState => ({\r\n        score: newState.score + 1\r\n      }),\r\n      () => this.winning()\r\n    );\r\n  };\r\n\r\n  newHighScore = () => {\r\n    this.setState(newState => ({\r\n      highScore: newState.score\r\n    }));\r\n  };\r\n\r\n  winning = () => {\r\n    if (this.state.score === this.state.friends.length) {\r\n      alert(\"YOU WON! Congratulations!\");\r\n      this.setState({});\r\n      this.resetGame();\r\n    } else {\r\n      setTimeout(() => {\r\n        this.randomOrganize(this.state.friends);\r\n      }, 500);\r\n    }\r\n  };\r\n\r\n  resetGame = () => {\r\n    this.state.friends.forEach(image => {\r\n      image.clicked = false;\r\n    });\r\n    this.setState({ score: 0 });\r\n  };\r\n\r\n  // Map over this.state.friends and render a Card component for each friend object\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar score={this.state.score} highScore={this.state.highScore} />\r\n        <Wrapper>\r\n          {this.state.friends.map(friend => {\r\n            return (\r\n              <Card\r\n                {...friend}\r\n                key={friend.id}\r\n                randomRender={this.randomRender}\r\n                randomOrganize={() => this.randomOrganize(this.state.friends)}\r\n              />\r\n            );\r\n          })}\r\n        </Wrapper>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}